x_min,
x_max,
n_s = 320,
n_x = 320,
n_t,
alpha = 5,
lambda = 500,
tolerance)
american_option_lv_2d(s0 = 1,
x0 = 0,
k,
tau,
r_d,
r_f,
q,
sigma_s,
sigma_x,
rho,
type = "put",
s_min,
s_max,
x_min,
x_max,
n_s = 320,
n_x = 320,
n_t,
alpha = 5,
lambda = 500,
tolerance)
# Set seed for reproducibility
set.seed(123)
# Generating simulated data
n <- 100
x <- runif(n, 0.8, 1.2)  # moneyness values (0.8 to 1.2)
y <- runif(n, 0.1, 1)    # time to maturity (0.1 to 1 year)
z <- sin(pi * x) * cos(pi * y) + rnorm(n, sd = 0.1)  # volatility values with noise
# Plot the points to visualize the data
plot(x, y, col = heat.colors(n)[rank(z)], pch = 16,
main = "Simulated Volatility Data", xlab = "Moneyness", ylab = "Time to Maturity")
# Fit a Thin Plate Spline model
tps_model <- Tps(x = cbind(x, y), Y = z)
library(fields)
# Fit a Thin Plate Spline model
tps_model <- Tps(x = cbind(x, y), Y = z)
# Print summary of the model
summary(tps_model)
# Create a grid of values for moneyness and time to maturity
grid_x <- seq(0.8, 1.2, length = 50)
grid_y <- seq(0.1, 1, length = 50)
grid <- expand.grid(grid_x, grid_y)
# Predict volatility values on the grid
predicted_z <- predict(tps_model, newdata = grid)
# Reshape predicted values for plotting
z_matrix <- matrix(predicted_z, nrow = 50, ncol = 50)
# 3D Visualization of the fitted surface
library(plot3D)
persp3D(x = grid_x, y = grid_y, z = z_matrix, col = "lightblue",
theta = 30, phi = 20, expand = 0.75,
xlab = "Moneyness", ylab = "Time to Maturity", zlab = "Volatility",
main = "Thin Plate Spline Fitted Surface")
install.packages("plot3D")
# 3D Visualization of the fitted surface
library(plot3D)
persp3D(x = grid_x, y = grid_y, z = z_matrix, col = "lightblue",
theta = 30, phi = 20, expand = 0.75,
xlab = "Moneyness", ylab = "Time to Maturity", zlab = "Volatility",
main = "Thin Plate Spline Fitted Surface")
# 3D Visualization of the fitted surface
library(plot3D)
# 3D Visualization of the fitted surface
library(plot3D)
persp3D(x = grid_x, y = grid_y, z = z_matrix, col = "lightblue",
theta = 30, phi = 20, expand = 0.75,
xlab = "Moneyness", ylab = "Time to Maturity", zlab = "Volatility",
main = "Thin Plate Spline Fitted Surface")
persp3D(x = grid_x, y = grid_y, z = z, col = "lightblue",
theta = 30, phi = 20, expand = 0.75,
xlab = "Moneyness", ylab = "Time to Maturity", zlab = "Volatility",
main = "Thin Plate Spline Fitted Surface")
grid_x
x
persp3D(x = x, y = y, z = z, col = "lightblue",
theta = 30, phi = 20, expand = 0.75,
xlab = "Moneyness", ylab = "Time to Maturity", zlab = "Volatility",
main = "Thin Plate Spline Fitted Surface")
# Plot the points to visualize the data
plot(x, y, col = heat.colors(n)[rank(z)], pch = 16,
main = "Simulated Volatility Data", xlab = "Moneyness", ylab = "Time to Maturity")
# Load necessary libraries
library(fields)
library(plotly)
# Generate simulated data
set.seed(123)
n <- 100
x <- runif(n, 0.8, 1.2)  # moneyness values
y <- runif(n, 0.1, 1)    # time to maturity
z <- sin(pi * x) * cos(pi * y) + rnorm(n, sd = 0.1)  # volatility values with noise
# Fit Thin Plate Spline model
tps_model <- Tps(x = cbind(x, y), Y = z)
# Create a grid for prediction
grid_x <- seq(0.8, 1.2, length = 50)
grid_y <- seq(0.1, 1, length = 50)
grid <- expand.grid(grid_x, grid_y)
predicted_z <- predict(tps_model, newdata = grid)
# Reshape for Plotly 3D surface plot
z_matrix <- matrix(predicted_z, nrow = 50, ncol = 50)
# Create 3D plot with Plotly
plot <- plot_ly() %>%
# Add original data points
add_markers(x = ~x, y = ~y, z = ~z, marker = list(color = 'red', size = 3),
name = "Original Data") %>%
# Add fitted TPS surface
add_surface(x = ~grid_x, y = ~grid_y, z = ~z_matrix, opacity = 0.7,
colorscale = list(c(0, 'lightblue'), c(1, 'darkblue')),
name = "Fitted TPS Surface") %>%
layout(scene = list(
xaxis = list(title = "Moneyness"),
yaxis = list(title = "Time to Maturity"),
zaxis = list(title = "Volatility"),
title = "Original Data vs. TPS Fitted Surface"
))
# Display the plot
plot
# Fit Thin Plate Spline model
tps_model <- Tps(x = cbind(x, y), Y = z, lambda = 0.1)
# Create a grid for prediction
grid_x <- seq(0.8, 1.2, length = 50)
grid_y <- seq(0.1, 1, length = 50)
grid <- expand.grid(grid_x, grid_y)
predicted_z <- predict(tps_model, newdata = grid)
# Reshape for Plotly 3D surface plot
z_matrix <- matrix(predicted_z, nrow = 50, ncol = 50)
# Create 3D plot with Plotly
plot <- plot_ly() %>%
# Add original data points
add_markers(x = ~x, y = ~y, z = ~z, marker = list(color = 'red', size = 3),
name = "Original Data") %>%
# Add fitted TPS surface
add_surface(x = ~grid_x, y = ~grid_y, z = ~z_matrix, opacity = 0.7,
colorscale = list(c(0, 'lightblue'), c(1, 'darkblue')),
name = "Fitted TPS Surface") %>%
layout(scene = list(
xaxis = list(title = "Moneyness"),
yaxis = list(title = "Time to Maturity"),
zaxis = list(title = "Volatility"),
title = "Original Data vs. TPS Fitted Surface"
))
# Display the plot
plot
# Fit Thin Plate Spline model
tps_model <- Tps(x = cbind(x, y), Y = z, lambda = 0.9)
# Create a grid for prediction
grid_x <- seq(0.8, 1.2, length = 50)
grid_y <- seq(0.1, 1, length = 50)
grid <- expand.grid(grid_x, grid_y)
predicted_z <- predict(tps_model, newdata = grid)
# Reshape for Plotly 3D surface plot
z_matrix <- matrix(predicted_z, nrow = 50, ncol = 50)
# Create 3D plot with Plotly
plot <- plot_ly() %>%
# Add original data points
add_markers(x = ~x, y = ~y, z = ~z, marker = list(color = 'red', size = 3),
name = "Original Data") %>%
# Add fitted TPS surface
add_surface(x = ~grid_x, y = ~grid_y, z = ~z_matrix, opacity = 0.7,
colorscale = list(c(0, 'lightblue'), c(1, 'darkblue')),
name = "Fitted TPS Surface") %>%
layout(scene = list(
xaxis = list(title = "Moneyness"),
yaxis = list(title = "Time to Maturity"),
zaxis = list(title = "Volatility"),
title = "Original Data vs. TPS Fitted Surface"
))
# Display the plot
plot
z <- sin(pi * x) * cos(pi * y) + rnorm(n, sd = 0.06)  # volatility values with noise
# Fit Thin Plate Spline model
tps_model <- Tps(x = cbind(x, y), Y = z, lambda = 0.9)
# Create a grid for prediction
grid_x <- seq(0.8, 1.2, length = 50)
grid_y <- seq(0.1, 1, length = 50)
grid <- expand.grid(grid_x, grid_y)
predicted_z <- predict(tps_model, newdata = grid)
# Reshape for Plotly 3D surface plot
z_matrix <- matrix(predicted_z, nrow = 50, ncol = 50)
# Create 3D plot with Plotly
plot <- plot_ly() %>%
# Add original data points
add_markers(x = ~x, y = ~y, z = ~z, marker = list(color = 'red', size = 3),
name = "Original Data") %>%
# Add fitted TPS surface
add_surface(x = ~grid_x, y = ~grid_y, z = ~z_matrix, opacity = 0.7,
colorscale = list(c(0, 'lightblue'), c(1, 'darkblue')),
name = "Fitted TPS Surface") %>%
layout(scene = list(
xaxis = list(title = "Moneyness"),
yaxis = list(title = "Time to Maturity"),
zaxis = list(title = "Volatility"),
title = "Original Data vs. TPS Fitted Surface"
))
# Display the plot
plot
z <- sin(pi * x) * cos(pi * y) + rnorm(n, sd = 0)  # volatility values with noise
# Fit Thin Plate Spline model
tps_model <- Tps(x = cbind(x, y), Y = z, lambda = 0.9)
# Create a grid for prediction
grid_x <- seq(0.8, 1.2, length = 50)
grid_y <- seq(0.1, 1, length = 50)
grid <- expand.grid(grid_x, grid_y)
predicted_z <- predict(tps_model, newdata = grid)
# Reshape for Plotly 3D surface plot
z_matrix <- matrix(predicted_z, nrow = 50, ncol = 50)
# Create 3D plot with Plotly
plot <- plot_ly() %>%
# Add original data points
add_markers(x = ~x, y = ~y, z = ~z, marker = list(color = 'red', size = 3),
name = "Original Data") %>%
# Add fitted TPS surface
add_surface(x = ~grid_x, y = ~grid_y, z = ~z_matrix, opacity = 0.7,
colorscale = list(c(0, 'lightblue'), c(1, 'darkblue')),
name = "Fitted TPS Surface") %>%
layout(scene = list(
xaxis = list(title = "Moneyness"),
yaxis = list(title = "Time to Maturity"),
zaxis = list(title = "Volatility"),
title = "Original Data vs. TPS Fitted Surface"
))
# Display the plot
plot
cbind(x, y)
z
# Fit Thin Plate Spline model
tps_model <- Tps(x = cbind(x, y), Y = z)
# Create a grid for prediction
grid_x <- seq(0.8, 1.2, length = 50)
grid_y <- seq(0.1, 1, length = 50)
grid <- expand.grid(grid_x, grid_y)
predicted_z <- predict(tps_model, newdata = grid)
# Reshape for Plotly 3D surface plot
z_matrix <- matrix(predicted_z, nrow = 50, ncol = 50)
# Create 3D plot with Plotly
plot <- plot_ly() %>%
# Add original data points
add_markers(x = ~x, y = ~y, z = ~z, marker = list(color = 'red', size = 3),
name = "Original Data") %>%
# Add fitted TPS surface
add_surface(x = ~grid_x, y = ~grid_y, z = ~z_matrix, opacity = 0.7,
colorscale = list(c(0, 'lightblue'), c(1, 'darkblue')),
name = "Fitted TPS Surface") %>%
layout(scene = list(
xaxis = list(title = "Moneyness"),
yaxis = list(title = "Time to Maturity"),
zaxis = list(title = "Volatility"),
title = "Original Data vs. TPS Fitted Surface"
))
# Display the plot
plot
# Parámetros del problema
theta <- 15
S0 <- 100
r <- 0.05
q <- 0.02
strikes <- seq(90, 110, by=2)  # Ejemplo de precios de ejercicio
expiries <- c(0.5, 1.0)        # Ejemplo de vencimientos
# Función de volatilidad local objetivo
sigma <- function(S) {
theta / S
}
# Generar precios de opciones simulados usando la función de valoración
observed_prices <- matrix(NA, nrow=length(strikes), ncol=length(expiries))
for (i in 1:length(strikes)) {
for (j in 1:length(expiries)) {
observed_prices[i, j] <- valoracion_opcion(S0, strikes[i], expiries[j], r, q, sigma)
}
}
# Configuración de los splines cúbicos para aproximar la superficie de volatilidad
library(fields)  # Para interpolación spline
spline_grid <- list(S=seq(80, 120, by=5), t=seq(0, 1, by=0.1))  # Nodos de spline
vol_surface_initial <- outer(spline_grid$S, spline_grid$t, Vectorize(sigma))  # Volatilidad inicial
spline_grid
sigma
Vectorize(sigma)
vol_surface_initial <- outer(spline_grid$S, spline_grid$t, Vectorize(sigma))  # Volatilidad inicial
# Problema de optimización para ajustar la superficie de volatilidad
# Definir función de coste y aplicar optimización
library(stats4)
cost_function <- function(sigma_params) {
# Reconstruir la superficie de volatilidad con los parámetros de optimización
sigma_reconstructed <- outer(spline_grid$S, spline_grid$t, function(S, t) {
interpolate_spline(S, t, sigma_params, spline_grid)
})
# Calcular precios usando la función de valoración y comparar con observados
prices_calculated <- matrix(NA, nrow=length(strikes), ncol=length(expiries))
for (i in 1:length(strikes)) {
for (j in 1:length(expiries)) {
prices_calculated[i, j] <- valoracion_opcion(S0, strikes[i], expiries[j], r, q, sigma_reconstructed)
}
}
# Error cuadrático medio
sum((observed_prices - prices_calculated)^2)
}
# Aplicar optimización
optim_results <- optim(vol_surface_initial, cost_function, method="L-BFGS-B", lower=0.05, upper=0.5)
spline_grid <- list(S=seq(80, 120, by=5), t=seq(0, 1, by=0.1))  # Nodos de spline
spline_grid
vol_surface_initial <- outer(spline_grid$S, spline_grid$t, Vectorize(sigma))  # Volatilidad inicial
vol_surface_initial <- outer(spline_grid$S, spline_grid$t, FUN = Vectorize(sigma))  # Volatilidad inicial
vol_surface_initial <- outer(X = spline_grid$S, Y = spline_grid$t, FUN = Vectorize(sigma))  # Volatilidad inicial
# Definir la función de interpolación de spline que acepte dos argumentos
interpolate_spline <- function(S, t, sigma_params, spline_grid) {
# Aquí, interpolar la volatilidad en función de S y t
interp <- Tps(x = expand.grid(spline_grid$S, spline_grid$t), Y = sigma_params)
predict(interp, c(S, t))
}
# Configuración del grid para interpolar en la superficie de volatilidad
vol_surface_initial <- outer(spline_grid$S, spline_grid$t,
Vectorize(function(S, t) sigma(S)))  # Aplicar Vectorize para aceptar S y t
# Aquí reemplazamos sigma con la función de interpolación
sigma_reconstructed <- outer(spline_grid$S, spline_grid$t,
Vectorize(function(S, t) interpolate_spline(S, t, sigma_params = vol_surface_initial, spline_grid)))
# Definir la función de interpolación usando mKrig
interpolate_spline <- function(S, t, sigma_params, spline_grid) {
# Crear grid de puntos para los splines
grid_points <- expand.grid(spline_grid$S, spline_grid$t)
# Asegurarse de que sigma_params es un vector y no una matriz
sigma_params_vector <- as.vector(sigma_params)
# Usar mKrig para manejar los datos como vector
interp <- mKrig(x = as.matrix(grid_points), Y = sigma_params_vector)
predict(interp, c(S, t))
}
# Configuración del grid para interpolar en la superficie de volatilidad
vol_surface_initial <- outer(spline_grid$S, spline_grid$t,
Vectorize(function(S, t) sigma(S)))  # Aplicar Vectorize para aceptar S y t
# Interpolación de la superficie de volatilidad con los parámetros iniciales
sigma_reconstructed <- outer(spline_grid$S, spline_grid$t,
Vectorize(function(S, t) interpolate_spline(S, t, sigma_params = vol_surface_initial, spline_grid)))
# Interpolación de la superficie de volatilidad con los parámetros iniciales
sigma_reconstructed <- outer(X = spline_grid$S, Y = spline_grid$t,
Vectorize(function(S, t) interpolate_spline(S, t, sigma_params = vol_surface_initial, spline_grid)))
vol_surface_initial
spline_grid
?outer
?mKrig()
interpolate_spline
?interpolate_spline
# Definir la función de interpolación usando mKrig
interpolate_spline <- function(S, t, sigma_params, spline_grid) {
# Crear grid de puntos para los splines
grid_points <- expand.grid(spline_grid$S, spline_grid$t)
# Asegurarse de que sigma_params es un vector y no una matriz
sigma_params_vector <- as.vector(sigma_params)
# Usar mKrig para manejar los datos como vector
interp <- mKrig(x = as.matrix(grid_points), Y = sigma_params_vector)
predict(interp, c(S, t))
}
# Configuración del grid para interpolar en la superficie de volatilidad
vol_surface_initial <- outer(spline_grid$S, spline_grid$t,
Vectorize(function(S, t) sigma(S)))  # Aplicar Vectorize para aceptar S y t
# Interpolación de la superficie de volatilidad con los parámetros iniciales
sigma_reconstructed <- outer(X = spline_grid$S, Y = spline_grid$t,
Vectorize(function(S, t) interpolate_spline(S, t, sigma_params = vol_surface_initial, spline_grid)))
vol_surface_initial
# Interpolación de la superficie de volatilidad con los parámetros iniciales
sigma_reconstructed <- outer(X = spline_grid$S, Y = spline_grid$t,
Vectorize(function(S, t) interpolate_spline(S, t, sigma_params = vol_surface_initial, spline_grid)))
# Interpolación de la superficie de volatilidad con los parámetros iniciales
sigma_reconstructed <- outer(X = spline_grid$S, Y = spline_grid$t,
Vectorize(function(X, Y) interpolate_spline(X, Y, sigma_params = vol_surface_initial, spline_grid)))
# Definir la función de interpolación de spline que acepte dos argumentos
interpolate_spline <- function(S, t, sigma_params, spline_grid) {
# Crear grid de puntos para los splines
grid_points <- expand.grid(spline_grid$S, spline_grid$t)
# Asegurarse de que sigma_params es un vector y no una matriz
sigma_params_vector <- as.vector(sigma_params)
# Usar Tps para interpolación de spline en 2D
interp <- Tps(x = as.matrix(grid_points), Y = sigma_params_vector)
predict(interp, data.frame(x1 = S, x2 = t))  # Data frame con nombres de variables
}
# Configuración del grid para interpolar en la superficie de volatilidad
vol_surface_initial <- outer(spline_grid$S, spline_grid$t,
Vectorize(function(S, t) sigma(S)))  # Aplicar Vectorize para aceptar S y t
# Interpolación de la superficie de volatilidad con los parámetros iniciales
sigma_reconstructed <- outer(spline_grid$S, spline_grid$t,
Vectorize(function(S, t) interpolate_spline(S, t, sigma_params = vol_surface_initial, spline_grid)))
# Problema de optimización para ajustar la superficie de volatilidad
# Definir función de coste y aplicar optimización
library(stats4)
cost_function <- function(sigma_params) {
# Reconstruir la superficie de volatilidad con los parámetros de optimización
sigma_reconstructed <- outer(spline_grid$S, spline_grid$t, function(S, t) {
interpolate_spline(S, t, sigma_params, spline_grid)
})
# Calcular precios usando la función de valoración y comparar con observados
prices_calculated <- matrix(NA, nrow=length(strikes), ncol=length(expiries))
for (i in 1:length(strikes)) {
for (j in 1:length(expiries)) {
prices_calculated[i, j] <- valoracion_opcion(S0, strikes[i], expiries[j], r, q, sigma_reconstructed)
}
}
# Error cuadrático medio
sum((observed_prices - prices_calculated)^2)
}
# Aplicar optimización
optim_results <- optim(vol_surface_initial, cost_function, method="L-BFGS-B", lower=0.05, upper=0.5)
sigma_reconstructed
library(Rcpp)
compileAttributes()
compileAttributes()
library(Rcpp)
library(Rcpp)
compileAttributes()
library(roxygen2)
compileAttributes()
compileAttributes()
?RQuantLib::AmericanOption()
roxygenise()
compileAttributes()
Rcpp::compileAttributes()
roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
Rcpp::compileAttributes()
roxygen2::roxygenise()
Rcpp::compileAttributes()
devtools::document()
Rcpp::compileAttributes()
devtools::document()
Rcpp::compileAttributes()
devtools::document()
Rcpp::compileAttributes()
roxygen2::roxygenise()
Rcpp::compileAttributes()
roxygen2::roxygenise()
Rcpp::compileAttributes()
roxygen2::roxygenise()
devtools::document()
Rcpp::compileAttributes()
devtools::document()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::document()
Rcpp::compileAttributes()
devtools::document()
Rcpp::compileAttributes()
devtools::document()
Rcpp::compileAttributes()
devtools::document()
devtools::install()
remove.packages("LocalVolatility")
Rcpp::compileAttributes()
devtools::document()
devtools::install()
Rcpp::compileAttributes()
devtools::document()
devtools::install()
Rcpp::compileAttributes()
devtools::document()
devtools::install()
Rcpp::compileAttributes()
devtools::document()
Rcpp::compileAttributes()
devtools::document()
devtools::install()
Rcpp::compileAttributes()
devtools::document()
devtools::install()
Rcpp::compileAttributes()
devtools::document()
devtools::install()
Rcpp::compileAttributes()
devtools::install()
devtools::document()
devtools::install()
devtools::install()
Rcpp::compileAttributes()
devtools::document()
devtools::install()
Rcpp::compileAttributes()
Rcpp::compileAttributes()
devtools::document()
devtools::document()
devtools::install()
devtools::document()
Rcpp::compileAttributes()
devtools::document()
devtools::install()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(LocalVolatility)
remove.packages("LocalVolatility")
devtools::document()
devtools::document()
devtools::document()
compileAttributes()
Rcpp::compileAttributes()
roxygen2::roxygenise()
Rcpp::compileAttributes()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::check(document = FALSE)
devtools::check(document = FALSE)
install.packages("roxygen2")
devtools::check(document = FALSE)
Rcpp::sourceCpp("src/utils.cpp")
Rcpp::sourceCpp("src/1D_american_option_local_volatility.cpp")
